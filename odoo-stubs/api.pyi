from collections import Mapping
from typing import Any, Optional

from .sql_db import Cursor

class Params:
    args: Any = ...
    kwargs: Any = ...
    def __init__(self, args: Any, kwargs: Any) -> None: ...

class Meta(type):
    def __new__(meta: Any, name: Any, bases: Any, attrs: Any): ...

def constrains(*args: Any): ...
def onchange(*args: Any): ...
def depends(*args: Any): ...
def depends_context(*args: Any): ...
def returns(model: Any, downgrade: Optional[Any] = ..., upgrade: Optional[Any] = ...): ...
def model(method: Any): ...
def model_create_single(method: Any): ...
def model_create_multi(method: Any): ...
def call_kw(model: Any, name: Any, args: Any, kwargs: Any): ...

class Environment(Mapping):
    cr: Cursor = ...
    uid: int = ...
    context: dict = ...
    su: bool = ...
    @property
    def envs(cls) -> Environments: ...
    @classmethod
    def manage(cls) -> None: ...
    @classmethod
    def reset(cls) -> None: ...
    registry: Any = ...
    cache: Any = ...
    all: Any = ...
    def __new__(cls, cr: Any, uid: Any, context: Any) -> Environment: ...
    def __contains__(self, model_name: Any): ...
    def __getitem__(self, model_name: Any): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def __hash__(self): ...
    def __call__(self, cr: Optional[Any] = ..., user: Optional[Any] = ..., context: Optional[Any] = ...) -> Environment: ...
    def ref(self, xml_id: Any, raise_if_not_found: bool = ...): ...
    def is_superuser(self): ...
    def is_admin(self): ...
    def is_system(self): ...
    @property
    def user(self):
        return self['res.users']
    @property
    def company(self):
        return self['res.company']
    @property
    def companies(self):
        return self['res.company']
    @property
    def lang(self) -> str: ...
    def clear(self) -> None: ...
    def clear_upon_failure(self) -> None: ...
    def is_protected(self, field: Any, record: Any): ...
    def protected(self, field: Any): ...
    def protecting(self, what: Any, records: Optional[Any] = ...) -> None: ...
    def fields_to_compute(self): ...
    def records_to_compute(self, field: Any): ...
    def is_to_compute(self, field: Any, record: Any): ...
    def not_to_compute(self, field: Any, records: Any): ...
    def add_to_compute(self, field: Any, records: Any): ...
    def remove_to_compute(self, field: Any, records: Any) -> None: ...
    def norecompute(self) -> None: ...

class Environments:
    envs: Any = ...
    cache: Any = ...
    protected: Any = ...
    tocompute: Any = ...
    towrite: Any = ...
    def __init__(self): ...
    def add(self, env: Any) -> None: ...
    def __iter__(self) -> Any: ...

class Cache:
    def __init__(self) -> None: ...
    def contains(self, record: Any, field: Any): ...
    def get(self, record: Any, field: Any, default: Any = ...): ...
    def set(self, record: Any, field: Any, value: Any) -> None: ...
    def update(self, records: Any, field: Any, values: Any) -> None: ...
    def remove(self, record: Any, field: Any) -> None: ...
    def get_values(self, records: Any, field: Any) -> None: ...
    def get_records_different_from(self, records: Any, field: Any, value: Any): ...
    def get_fields(self, record: Any) -> None: ...
    def get_records(self, model: Any, field: Any): ...
    def get_missing_ids(self, records: Any, field: Any) -> None: ...
    def invalidate(self, spec: Optional[Any] = ...) -> None: ...
    def check(self, env: Any) -> None: ...
