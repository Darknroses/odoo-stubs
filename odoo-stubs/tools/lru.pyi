from typing import Any, Optional

class LRUNode:
    __slots__: Any = ...
    prev: Any = ...
    me: Any = ...
    next: Any = ...
    def __init__(self, prev: Any, me: Any) -> None: ...

class LRU:
    _lock: Any = ...
    count: Any = ...
    d: Any = ...
    first: Any = ...
    last: Any = ...
    def __init__(self, count: Any, pairs: Any = ...) -> None: ...
    def __contains__(self, obj: Any): ...
    def get(self, obj: Any, val: Optional[Any] = ...): ...
    def __getitem__(self, obj: Any): ...
    def __setitem__(self, obj: Any, val: Any) -> None: ...
    def __delitem__(self, obj: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    def iteritems(self) -> None: ...
    items: Any = ...
    def iterkeys(self): ...
    def itervalues(self): ...
    def keys(self): ...
    def pop(self, key: Any): ...
    def clear(self) -> None: ...
