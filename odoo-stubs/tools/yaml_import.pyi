from . import assertion_report as assertion_report, pycompat as pycompat, yaml_tag as yaml_tag
from .config import config as config
from .misc import DEFAULT_SERVER_DATETIME_FORMAT as DEFAULT_SERVER_DATETIME_FORMAT, DEFAULT_SERVER_DATE_FORMAT as DEFAULT_SERVER_DATE_FORMAT, file_open as file_open
from .safe_eval import safe_eval as safe_eval
from odoo import SUPERUSER_ID as SUPERUSER_ID
from typing import Any, Optional

unsafe_eval = eval
_logger: Any

class YamlImportException(Exception): ...
class YamlImportAbortion(Exception): ...

def _is_yaml_mapping(node: Any, tag_constructor: Any): ...
def is_comment(node: Any): ...
def is_assert(node: Any): ...
def is_record(node: Any): ...
def is_python(node: Any): ...
def is_menuitem(node: Any): ...
def is_function(node: Any): ...
def is_report(node: Any): ...
def is_act_window(node: Any): ...
def is_delete(node: Any): ...
def is_context(node: Any): ...
def is_url(node: Any): ...
def is_eval(node: Any): ...
def is_ref(node: Any): ...
def is_string(node: Any): ...

class RecordDictWrapper(dict):
    record: Any = ...
    def __init__(self, record: Any) -> None: ...
    def __getitem__(self, key: Any): ...

class YamlInterpreter:
    cr: Any = ...
    module: Any = ...
    id_map: Any = ...
    mode: Any = ...
    filename: Any = ...
    assertion_report: Any = ...
    noupdate: Any = ...
    loglevel: Any = ...
    uid: Any = ...
    context: Any = ...
    eval_context: Any = ...
    env: Any = ...
    sudo_env: Any = ...
    def __init__(self, cr: Any, module: Any, id_map: Any, mode: Any, filename: Any, report: Optional[Any] = ..., noupdate: bool = ..., loglevel: Any = ...) -> None: ...
    def _log(self, *args: Any, **kwargs: Any) -> None: ...
    def validate_xml_id(self, xml_id: Any) -> None: ...
    def get_id(self, xml_id: Any): ...
    def get_record(self, xml_id: Any): ...
    def get_context(self, node: Any, eval_dict: Any): ...
    def isnoupdate(self, node: Any): ...
    def _get_first_result(self, results: Any, default: bool = ...): ...
    def process_comment(self, node: Any): ...
    def _log_assert_failure(self, msg: Any, *args: Any) -> None: ...
    def _get_assertion_id(self, assertion: Any): ...
    def process_assert(self, node: Any) -> None: ...
    def _coerce_bool(self, value: Any, default: bool = ...): ...
    def create_osv_memory_record(self, record: Any, fields: Any): ...
    def process_record(self, node: Any) -> None: ...
    _dict: Any = ...
    def _create_record(self, model: Any, fields: Any, view_info: Optional[Any] = ..., parent: Any = ..., default: bool = ..., context: Optional[Any] = ...): ...
    def process_ref(self, node: Any, field: Optional[Any] = ...): ...
    def process_eval(self, node: Any): ...
    def _eval_field(self, model: Any, field_name: Any, expression: Any, view_info: bool = ..., parent: Any = ..., default: bool = ..., context: Optional[Any] = ...): ...
    def process_context(self, node: Any) -> None: ...
    def process_python(self, node: Any) -> None: ...
    def _eval_params(self, model: Any, params: Any): ...
    def process_function(self, node: Any): ...
    def _set_group_values(self, node: Any, values: Any) -> None: ...
    def process_menuitem(self, node: Any) -> None: ...
    def process_act_window(self, node: Any) -> None: ...
    def process_delete(self, node: Any) -> None: ...
    def process_url(self, node: Any) -> None: ...
    def process_report(self, node: Any) -> None: ...
    def process_none(self) -> None: ...
    def process(self, yaml_string: Any) -> None: ...
    def _process_node(self, node: Any) -> None: ...
    def _log_node(self, node: Any, is_preceded_by_comment: Any): ...

def yaml_import(cr: Any, module: Any, yamlfile: Any, kind: Any, idref: Optional[Any] = ..., mode: str = ..., noupdate: bool = ..., report: Optional[Any] = ...) -> None: ...
convert_yaml_import = yaml_import
