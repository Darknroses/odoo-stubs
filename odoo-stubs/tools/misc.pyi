import pickle as pickle_
from collections.abc import Mapping, MutableMapping, MutableSet
from logging import Filter, LogRecord
from typing import Any, Collection, Generic, IO, AnyStr, Iterable, Iterator, NoReturn, TypeVar, Callable

import xlsxwriter
import xlwt
from babel.core import Locale
from xlwt import Worksheet

from .cache import *
from .parse_version import parse_version as parse_version
from ..loglevels import exception_to_unicode as exception_to_unicode, get_encodings as get_encodings
from ..sql_db import Cursor

_T = TypeVar('_T')
_T1 = TypeVar('_T1')
_KT = TypeVar('_KT')
_VT = TypeVar('_VT')

SKIPPED_ELEMENT_TYPES: tuple
NON_BREAKING_SPACE: str

def find_in_path(name: str) -> str: ...
def _exec_pipe(prog, args, env: Mapping[str, str] | None = ...) -> tuple[IO[AnyStr] | None, IO[AnyStr] | None]: ...
def exec_command_pipe(name: str, *args) -> tuple[IO[AnyStr] | None, IO[AnyStr] | None]: ...
def find_pg_tool(name: str) -> str: ...
def exec_pg_environ() -> dict[str, str]: ...
def exec_pg_command(name: str, *args) -> None: ...
def exec_pg_command_pipe(name: str, *args) -> tuple[IO[AnyStr] | None, IO[AnyStr] | None]: ...
def file_path(file_path: str, filter_ext: tuple[str, ...] = ...) -> str: ...
def file_open(name: str, mode: str = ..., filter_ext: tuple[str] | None = ...) -> IO: ...
def flatten(list) -> list: ...
def reverse_enumerate(l): ...
def partition(pred: Callable[[_T], bool], elems: Iterable[_T]) -> tuple[list[_T], list[_T]]: ...
def topological_sort(elems: dict[_T, Any]) -> list[_T]: ...
def merge_sequences(*iterables: Iterable[_T]) -> list[_T]: ...

class PatchedWorkbook(xlwt.Workbook):
    def add_sheet(self, name: str, cell_overwrite_ok: bool = ...) -> Worksheet: ...

class PatchedXlsxWorkbook(xlsxwriter.Workbook):
    def add_worksheet(self, name: str | None = ..., **kw) -> Worksheet: ...

def to_xml(s: str) -> str: ...
def get_iso_codes(lang: str) -> str: ...
def scan_languages() -> list[tuple[str, str]]: ...
def mod10r(number: str) -> str: ...
def str2bool(s: str, default: Any | None = ...) -> bool: ...
def human_size(sz) -> str: ...
def logged(f: Callable) -> Callable: ...

class profile:
    fname: str | None
    def __init__(self, fname: str | None = ...) -> None: ...
    def __call__(self, f: Callable) -> Callable: ...

def detect_ip_addr() -> str: ...

DEFAULT_SERVER_DATE_FORMAT: str
DEFAULT_SERVER_TIME_FORMAT: str
DEFAULT_SERVER_DATETIME_FORMAT: str
DATE_LENGTH: int
DATETIME_FORMATS_MAP: dict[str, str]
POSIX_TO_LDML: dict[str, str]

def posix_to_ldml(fmt: str, locale: Locale) -> str: ...
def split_every(n: int, iterable: Iterable[_T], piece_maker: Callable[[Iterable[_T]], _T1] = ...) -> Iterator[_T1]: ...
def get_and_group_by_field(cr: Cursor, uid: int, obj, ids, field: str, context: dict | None = ...) -> dict: ...
def get_and_group_by_company(cr: Cursor, uid: int, obj, ids, context: dict | None = ...) -> dict: ...
def resolve_attr(obj, attr: str): ...
def attrgetter(*items): ...
def discardattr(obj, key: str) -> None: ...
def remove_accents(input_str: str) -> str: ...

class unquote(str):
    def __repr__(self) -> str: ...

class UnquoteEvalContext(defaultdict):
    def __init__(self, *args, **kwargs) -> None: ...
    def __missing__(self, key) -> unquote: ...

class mute_logger(Filter):
    loggers: tuple[str]
    def __init__(self, *loggers: str) -> None: ...
    def filter(self, record: LogRecord) -> int: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: Any | None = ..., exc_val: Any | None = ..., exc_tb: Any | None = ...) -> None: ...
    def __call__(self, func: Callable) -> Callable: ...

_ph: Any

class CountingStream(Generic[_T]):
    stream: Iterator[_T]
    index: int
    stopped: bool
    def __init__(self, stream: Iterable[_T], start: int = ...) -> None: ...
    def __iter__(self) -> CountingStream[_T]: ...
    def next(self) -> _T: ...
    __next__ = next

def stripped_sys_argv(*strip_args: str) -> list[str]: ...

class ConstantMapping(Mapping[_KT, _VT]):
    __slots__ = ['_value']
    _value: _VT
    def __init__(self, val: _VT) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator: ...
    def __getitem__(self, item) -> _VT: ...

def dumpstacks(sig: Any | None = ..., frame: Any | None = ..., thread_idents: Any | None = ...) -> None: ...
def freehash(arg) -> int: ...
def clean_context(context: dict[str, Any]) -> dict[str, Any]: ...

class frozendict(dict):
    __slots__ = ()
    def __delitem__(self, key) -> NoReturn: ...
    def __setitem__(self, key, val) -> NoReturn: ...
    def clear(self) -> NoReturn: ...
    def pop(self, key, default: Any | None = ...) -> NoReturn: ...
    def popitem(self) -> NoReturn: ...
    def setdefault(self, key, default: Any | None = ...) -> NoReturn: ...
    def update(self, *args, **kwargs) -> NoReturn: ...
    def __hash__(self) -> int: ...

class Collector(dict[_KT, tuple[_T]]):
    __slots__ = ()
    def __getitem__(self, key: _KT) -> tuple[_T]: ...
    def __setitem__(self, key: _KT, val: Iterable[_T]) -> None: ...
    def add(self, key: _KT, val: _T) -> None: ...
    def discard_keys_and_values(self, excludes: Collection): ...

class StackMap(MutableMapping):
    __slots__: Any
    _maps: Any
    def __init__(self, m: Any | None = ...) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, val) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __str__(self): ...
    def pushmap(self, m: Any | None = ...) -> None: ...
    def popmap(self): ...

class OrderedSet(MutableSet):
    __slots__: Any
    _map: Any
    def __init__(self, elems=...) -> None: ...
    def __contains__(self, elem): ...
    def __iter__(self): ...
    def __len__(self): ...
    def add(self, elem) -> None: ...
    def discard(self, elem) -> None: ...
    def update(self, elems) -> None: ...
    def difference_update(self, elems) -> None: ...
    def __repr__(self): ...

class LastOrderedSet(OrderedSet):
    def add(self, elem) -> None: ...

class Callbacks:
    __slots__: Any
    _funcs: Any
    data: Any
    def __init__(self) -> None: ...
    def add(self, func) -> None: ...
    def run(self) -> None: ...
    def clear(self) -> None: ...

class IterableGenerator:
    __slots__: Any
    func: Any
    args: Any
    def __init__(self, func, *args) -> None: ...
    def __iter__(self): ...

def groupby(iterable, key: Any | None = ...): ...
def unique(it) -> None: ...

class Reverse:
    __slots__: Any
    val: Any
    def __init__(self, val) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __ge__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...
    def __lt__(self, other): ...

def ignore(*exc) -> None: ...

html_escape: Any

def get_lang(env, lang_code: str = ...): ...
def babel_locale_parse(lang_code): ...
def formatLang(env, value, digits: Any | None = ..., grouping: bool = ..., monetary: bool = ..., dp: bool = ..., currency_obj: bool = ...): ...
def format_date(env, value, lang_code: str = ..., date_format: bool = ...): ...
def parse_date(env, value, lang_code: str = ...): ...
def format_datetime(env, value, tz: str = ..., dt_format: str = ..., lang_code: str = ...): ...
def format_time(env, value, tz: str = ..., time_format: str = ..., lang_code: str = ...): ...
def _format_time_ago(env, time_delta, lang_code: str = ..., add_direction: bool = ...): ...
def format_decimalized_number(number, decimal: int = ...): ...
def format_decimalized_amount(amount, currency: Any | None = ...): ...
def format_amount(env, amount, currency, lang_code: str = ...): ...
def format_duration(value): ...
def _consteq(str1, str2): ...

consteq: Any

class Unpickler(pickle_.Unpickler):
    find_global: Any
    find_class: Any

def _pickle_load(stream, encoding: str = ..., errors: bool = ...): ...

pickle: Any

class DotDict(dict):
    def __getattr__(self, attrib): ...

def get_diff(data_from, data_to, custom_style: bool = ...): ...
def traverse_containers(val, type_) -> None: ...
def hmac(env, scope, message, hash_function=...): ...
