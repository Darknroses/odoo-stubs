# Stubs for odoo.sql_db (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import psycopg2.extensions
from .tools.func import frame_codeinfo
from typing import Any, Optional

def unbuffer(symb: Any, cr: Any): ...
def undecimalize(symb: Any, cr: Any): ...
def adapt_string(adapted: Any): ...

re_from: Any
re_into: Any
sql_counter: int

class Cursor:
    IN_MAX: int = ...
    def check(f: Any): ...
    sql_from_log: Any = ...
    sql_into_log: Any = ...
    sql_log: Any = ...
    sql_log_count: int = ...
    dbname: Any = ...
    cache: Any = ...
    def __init__(self, pool: Any, dbname: Any, dsn: Any, serialized: bool = ...) -> None: ...
    def dictfetchone(self): ...
    def dictfetchmany(self, size: Any): ...
    def dictfetchall(self): ...
    def __del__(self) -> None: ...
    def execute(self, query: Any, params: Optional[Any] = ..., log_exceptions: Optional[Any] = ...): ...
    def split_for_in_conditions(self, ids: Any, size: Optional[Any] = ...): ...
    def print_log(self): ...
    def close(self): ...
    def autocommit(self, on: Any) -> None: ...
    def after(self, event: Any, func: Any) -> None: ...
    def commit(self): ...
    def rollback(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def savepoint(self) -> None: ...
    def __getattr__(self, name: Any): ...
    @property
    def closed(self): ...

class TestCursor:
    def __init__(self, cursor: Any, lock: Any) -> None: ...
    def close(self) -> None: ...
    def autocommit(self, on: Any) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def __getattr__(self, name: Any): ...

class LazyCursor:
    def __init__(self, dbname: Optional[Any] = ...) -> None: ...
    @property
    def dbname(self): ...
    def __getattr__(self, name: Any): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class PsycoConnection(psycopg2.extensions.connection): ...

class ConnectionPool:
    def locked(fun: Any): ...
    def __init__(self, maxconn: int = ...) -> None: ...
    def borrow(self, connection_info: Any): ...
    def give_back(self, connection: Any, keep_in_pool: bool = ...) -> None: ...
    def close_all(self, dsn: Optional[Any] = ...) -> None: ...

class Connection:
    dbname: Any = ...
    dsn: Any = ...
    def __init__(self, pool: Any, dbname: Any, dsn: Any) -> None: ...
    def cursor(self, serialized: bool = ...): ...
    serialized_cursor: Any = ...
    def __bool__(self) -> None: ...
    __nonzero__: Any = ...

def connection_info_for(db_or_uri: Any): ...
def db_connect(to: Any, allow_uri: bool = ...): ...
def close_db(db_name: Any) -> None: ...
def close_all() -> None: ...
