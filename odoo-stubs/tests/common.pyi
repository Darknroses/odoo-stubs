import unittest
from typing import Any, Optional

from odoo.api import Environment
from odoo.modules.registry import Registry
from odoo.sql_db import Cursor

_logger: Any
ADDONS_PATH: Any
HOST: str
PORT: Any
ADMIN_USER_ID: Any

def get_db_name(): ...

DB: Any

def at_install(flag: Any): ...
def post_install(flag: Any): ...

class TreeCase(unittest.TestCase):
    def __init__(self, methodName: str = ...) -> None: ...
    def assertTreesEqual(self, n1: Any, n2: Any, msg: Optional[Any] = ...) -> None: ...

class BaseCase(TreeCase):
    longMessage: bool = ...
    registry: Registry = ...
    cr: Cursor = ...
    env: Environment = ...
    def cursor(self): ...
    @property
    def uid(self): ...
    @uid.setter
    def uid(self, user: Any) -> None: ...
    def ref(self, xid: Any): ...
    def browse_ref(self, xid: Any): ...
    def _assertRaises(self, exception: Any) -> None: ...
    def assertRaises(self, exception: Any, func: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    def shortDescription(self): ...
    def assertItemsEqual(self, a: Any, b: Any, msg: Optional[Any] = ...) -> None: ...

class TransactionCase(BaseCase):
    def setUp(self): ...
    def patch(self, obj: Any, key: Any, val: Any) -> None: ...
    def patch_order(self, model: Any, order: Any) -> None: ...

class SingleTransactionCase(BaseCase):
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...

savepoint_seq: Any

class SavepointCase(SingleTransactionCase):
    _savepoint_id: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...

class HttpCase(TransactionCase):
    registry_test_mode: bool = ...
    xmlrpc_url: Any = ...
    xmlrpc_common: Any = ...
    xmlrpc_db: Any = ...
    xmlrpc_object: Any = ...
    def __init__(self, methodName: str = ...) -> None: ...
    session: Any = ...
    session_id: Any = ...
    opener: Any = ...
    def setUp(self) -> None: ...
    def url_open(self, url: Any, data: Optional[Any] = ..., timeout: int = ...): ...
    def authenticate(self, user: Any, password: Any) -> None: ...
    def phantom_poll(self, phantom: Any, timeout: Any): ...
    def phantom_run(self, cmd: Any, timeout: Any) -> None: ...
    def _wait_remaining_requests(self) -> None: ...
    def phantom_js(self, url_path: Any, code: Any, ready: str = ..., login: Optional[Any] = ..., timeout: int = ..., **kw: Any) -> None: ...

def can_import(module: Any): ...
